import { Module } from "@/user/types";
import path from "path";
import ping from "ping";
import si from "systeminformation";
import { TelegramClient } from "telegram";
import { NewMessageEvent } from "telegram/events";
import info from "./info.json";

async function menuHandler(client: TelegramClient, event: NewMessageEvent): Promise<void> {
  const message = event.message;

  await message.edit({ text: "‚ú® –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ..." });

  try {
    const cpu = await si.cpu();
    const mem = await si.mem();
    const gfx = await si.graphics();
    const os = await si.osInfo();

    const tgPingRes = await ping.promise.probe('149.154.167.91', { timeout: 2 });
    const googlePingRes = await ping.promise.probe('8.8.8.8', { timeout: 2 });
    const tgPing = tgPingRes.alive ? `${Math.round(parseFloat(tgPingRes.avg))}ms` : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    const googlePing = googlePingRes.alive ? `${Math.round(parseFloat(googlePingRes.avg))}ms` : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';

    const me = (await client.getMe()) as any;
    const myFirstName = me.firstName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";

    const logoPath = path.join(process.cwd(), 'assets', 'img', 'logo.png');

    const responseText = [
      `‚ï≠‚îÄ‚îÄ‚îÄÔπù YRIKub Ôπû‚îÄ‚îÄ‚îÄ`,
      `‚îÇ`,
      `‚îú‚îÄÔπù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Ôπû`,
      `‚îÇ  üë§ –ò–º—è: ${myFirstName}`,
      `‚îÇ`,
      `‚îú‚îÄÔπù üõ∞Ô∏è –ü–∏–Ω–≥ Ôπû`,
      `‚îÇ  ‚úàÔ∏è Telegram: ${tgPing}`,
      `‚îÇ  üåç Google: ${googlePing}`,
      `‚îÇ`,
      `‚îú‚îÄÔπù üíª –°–∏—Å—Ç–µ–º–∞ Ôπû`,
      `‚îÇ  üñ•Ô∏è –û–°: ${os.distro} (${os.release})`,
      `‚îÇ  ‚öôÔ∏è CPU: ${cpu.manufacturer} ${cpu.brand} @ ${cpu.speed}GHz`,
      `‚îÇ  üíæ RAM: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${(mem.used / 1024 / 1024 / 1024).toFixed(2)}GB –∏–∑ ${(mem.total / 1024 / 1024 / 1024).toFixed(2)}GB`,
      `‚îÇ  üé® GPU: ${gfx.controllers.map(c => `${c.vendor} ${c.model}`).join('\n') || "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}`,
      `‚îÇ`,
      `‚ï∞‚îÄ‚îÄ‚îÄÔπù @derxanax Ôπû‚îÄ‚îÄ‚îÄ`
    ].join('\n');

    await client.deleteMessages(message.chatId!, [message.id], { revoke: true });

    await client.sendFile(message.chatId!, {
      file: logoPath,
      caption: responseText
    });

  } catch (e: any) {
    console.error("Failed to generate menu:", e);
    try {
      await client.editMessage(message.chatId!, {
        message: message.id,
        text: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e.message || String(e)}`
      });
    } catch (editError) {
      console.error("Failed to edit message with error:", editError);
    }
  }
}

export const menuModule: Module = {
  info: info,
  handler: menuHandler,
  commands: ["menu"],
}; 