import { loadModules } from "@/user/main";
import { Module, ModuleInfo } from "@/user/types";
import fs from "fs/promises";
import path from "path";
import { TelegramClient } from "telegram";
import { NewMessageEvent } from "telegram/events";
import info from "./info.json";

async function moduleHandler(client: TelegramClient, event: NewMessageEvent, args: string[]): Promise<void> {
  const [action, moduleName] = args;

  const modulesPath = path.join(__dirname, '..');

  if (!action) {
    const moduleDirs = await fs.readdir(modulesPath, { withFileTypes: true });
    let responseText = `‚ï≠‚îÄ‚îÄ‚îÄÔπù –ú–æ–¥—É–ª–∏ YRIKub Ôπû‚îÄ‚îÄ‚îÄ\n‚îÇ\n`;
    for (const dir of moduleDirs) {
      if (dir.isDirectory()) {
        const infoPath = path.join(modulesPath, dir.name, 'info.json');
        try {
          const moduleInfo: ModuleInfo = JSON.parse(await fs.readFile(infoPath, 'utf-8'));
          responseText += `‚îú‚îÄ ${moduleInfo.name} ${moduleInfo.enabled ? 'üü¢' : 'üî¥'} - ${moduleInfo.description}\n`;
        } catch {
        }
      }
    }
    responseText += `‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄÔπù v1.0.0 Ôπû‚îÄ‚îÄ‚îÄ`;

    await event.message.edit({
      text: responseText
    });
    return;
  }

  if (!moduleName) {
    await event.message.edit({
      text: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥—É–ª—è."
    });
    return;
  }

  const targetModulePath = path.join(modulesPath, moduleName, 'info.json');

  try {
    const moduleInfo: ModuleInfo = JSON.parse(await fs.readFile(targetModulePath, 'utf-8'));

    switch (action.toLowerCase()) {
      case 'on':
      case 'enable':
        moduleInfo.enabled = true;
        break;
      case 'off':
      case 'disable':
        moduleInfo.enabled = false;
        break;
      default:
        await event.message.edit({
          text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ on –∏–ª–∏ off."
        });
        return;
    }

    await fs.writeFile(targetModulePath, JSON.stringify(moduleInfo, null, 4));
    await loadModules();

    const statusText = `–ú–æ–¥—É–ª—å ${moduleName} –±—ã–ª ${moduleInfo.enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}. ‚úÖ`;
    await event.message.edit({
      text: statusText
    });

  } catch (e) {
    const errorText = `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–¥—É–ª—å ${moduleName}. ‚ùå`;
    await event.message.edit({
      text: errorText
    });
  }
}

export const coreCommandsModule: Module = {
  info: info,
  handler: moduleHandler,
  commands: ["module"],
}; 