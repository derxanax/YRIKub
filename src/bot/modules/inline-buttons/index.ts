import { BotModule } from '@/bot/types';
import { Markup, Telegraf } from 'telegraf';
import info from './info.json';

const randomPhrases = [
  "–∂–µ–Ω—è —Ö—É–µ—Å–æ—Å",
  "–∂–µ–Ω—è –ø–∏–¥–æ–æ—Ä "
]
const negativeResponses = [
  "–ù–µ —Ç—Ä–æ–≥–∞–π –±–ª—è—Ç—å, –Ω–µ —Ç–≤–æ—ë! –∂–µ–Ω—è —Ö—É–µ—Å–æ—Å",
  "–ö—É–¥–∞ –ª–µ–∑–µ—à—å, –∞? –ò–¥–∏ –Ω–∞—Ö—É–π! –∂–µ–Ω—è –ø–∏–∂–æ—Ä–∞—Å",
  "–∂–µ–Ω—è –ø–∏–¥–æ—Ä–∞—Å, —Ä—É–∫–∏ —É–±—Ä–∞–ª –æ—Ç –∫–Ω–æ–ø–∫–∏, —ç—Ç–æ –Ω–µ –¥–ª—è —Ç–µ–±—è!"
];
const SPECIAL_USER_ID = 1256738876;
const IMAGE_URL = "https://cdn.rule34.gg/preview/53b5d77899fa7e6216b86000b4c23cf0.jpeg";

function getRandomPhrase(): string {
  const randomIndex = Math.floor(Math.random() * randomPhrases.length);
  return randomPhrases[randomIndex];
}

function getRandomNegativeResponse(): string {
  const randomIndex = Math.floor(Math.random() * negativeResponses.length);
  return negativeResponses[randomIndex];
}

function initInlineButtonsModule(bot: Telegraf): void {
  const OWNER_ID = parseInt((info as any)['id-admin'] || "0");

  bot.command('test', (ctx) => {
    ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞', Markup.inlineKeyboard([
      Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'edit_action')
    ]));
  });

  bot.on('inline_query', async (ctx) => {
    try {
      const query = ctx.inlineQuery.query;

      if (query.includes('test') || query === '') {
        await ctx.answerInlineQuery([
          {
            type: 'article',
            id: 'test-button',
            title: '–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
            description: '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É',
            input_message_content: {
              message_text: '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –º—É–¥—Ä–æ—Å—Ç—å'
            },
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data: 'edit_action' }]
              ]
            }
          }
        ], {
          cache_time: 1
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ inline –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
  });

  bot.action('edit_action', async (ctx) => {
    try {
      const userId = ctx.from?.id;
      const isOwner = OWNER_ID !== 0 && userId === OWNER_ID;

      if (userId === SPECIAL_USER_ID) {
        await ctx.answerCbQuery('–õ–æ–≤–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É üòâ');

        if (ctx.callbackQuery && 'message' in ctx.callbackQuery && ctx.callbackQuery.message) {
          try {
            await ctx.deleteMessage();
          } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
          }

          await ctx.replyWithPhoto(IMAGE_URL);
        } else if (ctx.callbackQuery && 'inline_message_id' in ctx.callbackQuery) {
          await ctx.telegram.editMessageMedia(
            undefined,
            undefined,
            ctx.callbackQuery.inline_message_id,
            { type: 'photo', media: IMAGE_URL }
          );
        }

        return;
      }

      if (!isOwner) {
        await ctx.answerCbQuery(getRandomNegativeResponse(), { show_alert: true });

        if (ctx.callbackQuery && 'message' in ctx.callbackQuery && ctx.callbackQuery.message) {
          try {
            await ctx.deleteMessage();
          } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
          }
        }
        return;
      }

      await ctx.answerCbQuery();
      const randomPhrase = getRandomPhrase();

      if (ctx.callbackQuery && 'inline_message_id' in ctx.callbackQuery) {
        const inlineMessageId = ctx.callbackQuery.inline_message_id;

        await ctx.telegram.editMessageText(
          undefined,
          undefined,
          inlineMessageId,
          `‚ú® –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è: ${randomPhrase}`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ï—â–µ –º—É–¥—Ä–æ—Å—Ç—å', callback_data: 'edit_action' }]
              ]
            }
          }
        );
      }
      else if (ctx.callbackQuery && 'message' in ctx.callbackQuery && ctx.callbackQuery.message) {
        await ctx.editMessageText(`‚ú® –ú—É–¥—Ä–æ—Å—Ç—å –¥–Ω—è: ${randomPhrase}`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ï—â–µ –º—É–¥—Ä–æ—Å—Ç—å', callback_data: 'edit_action' }]
            ]
          }
        });
      } else {
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ edit_action:', error);
      try {
        await ctx.answerCbQuery('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
      } catch { }
    }
  });
}

export const inlineButtonsModule: BotModule = {
  info,
  init: initInlineButtonsModule
}; 