import { BotModule } from "@/bot/types";
import { Telegraf, Markup } from "telegraf";
import axios from "axios";
import info from "./info.json";

interface ImageInfo {
  id: number;
  fileUrl: string;
  previewUrl: string;
}

interface ViewerSession {
  tag: string;
  images: ImageInfo[];
  currentIndex: number;
  chatId: number;
  messageId?: number;
}

const API_URL = "https://r34-sex.loca.lt/api/images";
const API_TOKEN = "fucl86me98and987cum2me";
const IMAGES_PER_FETCH = 20;

// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userEnabled: Map<number, boolean> = new Map();
// –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const sessions: Map<string, ViewerSession> = new Map();

function generateSessionId(): string {
  return (
    Date.now().toString(36) + Math.random().toString(36).substring(2, 8)
  );
}

async function fetchImages(
  tag: string,
  count: number = IMAGES_PER_FETCH,
  skip: number = 0
): Promise<ImageInfo[]> {
  const url = `${API_URL}?tag=${encodeURIComponent(tag)}&count=${count}&skip=${skip}`;
  const { data } = await axios.get(url, {
    headers: {
      "X-API-Token": API_TOKEN,
    },
  });
  return data;
}

function createKeyboard(sessionId: string) {
  return Markup.inlineKeyboard([
    [
      Markup.button.callback("‚¨ÖÔ∏è", `fh:${sessionId}:prev`),
      Markup.button.callback("‚û°Ô∏è", `fh:${sessionId}:next`),
    ],
    [Markup.button.callback("‚ùå –ó–∞–∫—Ä—ã—Ç—å", `fh:${sessionId}:close`)],
  ]);
}

async function sendViewerMessage(
  ctx: any,
  sessionId: string,
  session: ViewerSession
) {
  const current = session.images[session.currentIndex];
  if (!current) return;

  const caption = `üçë –¢–µ–≥: ${session.tag}\n–ö–∞–¥—Ä ${
    session.currentIndex + 1
  } / ${session.images.length} ‚Äî –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è üòè`;

  if (session.messageId) {
    try {
      await ctx.telegram.editMessageMedia(
        session.chatId,
        session.messageId,
        undefined,
        { type: "photo", media: current.fileUrl },
        { reply_markup: createKeyboard(sessionId).reply_markup }
      );
      await ctx.telegram.editMessageCaption(
        session.chatId,
        session.messageId,
        undefined,
        caption,
        { reply_markup: createKeyboard(sessionId).reply_markup }
      );
    } catch (err) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", err);
    }
  } else {
    const msg = await ctx.replyWithPhoto(current.fileUrl, {
      caption,
      reply_markup: createKeyboard(sessionId).reply_markup,
    });
    session.messageId = msg.message_id;
  }
}

function initFapHentModule(bot: Telegraf): void {
  // –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  bot.command("fap_hent", async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    const args = ctx.message.text.split(/\s+/).slice(1);
    const subCmd = args[0]?.toLowerCase();

    if (subCmd === "on") {
      userEnabled.set(userId, true);
      await ctx.reply(
        "üòà –ü–æ—Ä–Ω–æ—Ä–µ–∂–∏–º –≤—Ä—É–±–ª–µ–Ω! –®–ª–∏ —Ç–µ–≥ ‚Äî –ø–æ–¥–≥–æ–Ω—é –≥–æ—Ä—è—á–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ñ–∞–ø-—Å–µ–∞–Ω—Å–∞ ü§§"
      );
      return;
    }

    if (subCmd === "off") {
      userEnabled.delete(userId);
      await ctx.reply("üëç –•–≤–∞—Ç–∏—Ç –¥—Ä–æ—á–∏—Ç—å, —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –û—Ç–¥–æ—Ö–Ω–∏, —á–µ–º–ø–∏–æ–Ω! üçÜüí¶");
      return;
    }

    await ctx.reply(
      "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /fap_hent on | off\n–ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º —Ç–µ–≥–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞."
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ —Ç–µ–≥–æ–≤, –∫–æ–≥–¥–∞ —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω
  bot.on("text", async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;
    if (!userEnabled.get(userId)) return; // —Ä–µ–∂–∏–º –Ω–µ –≤–∫–ª—é—á—ë–Ω

    const tag = ctx.message.text.trim();
    if (!tag) return;

    await ctx.reply(`üîç –î–æ—Å—Ç–∞—é –ø–æ—Ä–µ–≤–æ –ø–æ —Ç–µ–≥—É: "${tag}"‚Ä¶ –ü–æ–¥–æ–∂–¥–∏, —â–∞ –±—É–¥–µ—Ç –∂–∞—Ä–∞ üî•`);

    try {
      const images = await fetchImages(tag);
      if (!images.length) {
        await ctx.reply(`üôÅ –ß—ë—Ä—Ç, –ø–æ —Ç–µ–≥—É "${tag}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ–º–æ—â—å!`);
        return;
      }

      const sessionId = generateSessionId();
      const session: ViewerSession = {
        tag,
        images,
        currentIndex: 0,
        chatId: ctx.chat.id,
      };
      sessions.set(sessionId, session);
      await sendViewerMessage(ctx, sessionId, session);
    } catch (err) {
      console.error(err);
      await ctx.reply("‚ùå –Å–ø—Ç–∞, —Å–µ—Ä–≤–µ—Ä –∫–∞–ø—Ä–∏–∑–Ω–∏—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  bot.action(/^fh:(.+):(prev|next|close)$/, async (ctx) => {
    const [, sessionId, action] = ctx.match as unknown as string[];
    const session = sessions.get(sessionId);
    if (!session) {
      await ctx.answerCbQuery("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.");
      return;
    }

    if (action === "close") {
      sessions.delete(sessionId);
      try {
        if (ctx.callbackQuery.message) {
          await ctx.deleteMessage();
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
      }
      await ctx.answerCbQuery();
      return;
    }

    if (action === "prev" && session.currentIndex > 0) {
      session.currentIndex -= 1;
    } else if (action === "next") {
      session.currentIndex += 1;

      // –ö–∞–∂–¥—ã–µ 10 –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª–∞–π–¥–æ–≤ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –µ—â—ë 20, –ø—Ä–æ–ø—É—Å–∫–∞—è —É–∂–µ –≤—ã–¥–∞–Ω–Ω—ã–µ
      if (session.currentIndex % 10 === 0) {
        try {
          const more = await fetchImages(
            session.tag,
            IMAGES_PER_FETCH,
            session.images.length
          );
          session.images.push(...more);
        } catch (e) {
          console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", e);
        }
      }
    }

    await sendViewerMessage(ctx, sessionId, session);
    await ctx.answerCbQuery();
  });
}

export const fapHentModule: BotModule = {
  info,
  init: initFapHentModule,
}; 